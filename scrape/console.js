(async function () {
  const START = 2003974;
  const END = 2097312;
  let shouldStop = false;
  const failedSBDs = [];

  // UI STOP BUTTON
  const stopBtn = document.createElement("button");
  stopBtn.textContent = "üõë STOP scraping";
  Object.assign(stopBtn.style, {
    position: "fixed", top: "20px", right: "20px",
    padding: "10px 15px", backgroundColor: "red",
    color: "white", fontSize: "16px", zIndex: 9999
  });
  stopBtn.onclick = () => {
    shouldStop = true;
    alert("‚èπÔ∏è Scraper will stop after current SBD.");
  };
  document.body.appendChild(stopBtn);

  // Helper Functions
  function saveProgress(sbd) {
    localStorage.setItem("lastSBD", sbd.toString());
  }

  function getResumeStart() {
    const last = localStorage.getItem("lastSBD");
    return last ? parseInt(last) : START;
  }

  function saveResults(results) {
    let existing = [];
    try {
      existing = JSON.parse(localStorage.getItem("allResults") || "[]");
    } catch {}
    const merged = [...existing, ...results];
    const deduped = Array.from(new Map(merged.map(r => [r[0], r])).values());
    localStorage.setItem("allResults", JSON.stringify(deduped));
    return deduped;
  }

  function downloadCSV(content, filename = "diem_thi.csv") {
    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function downloadTXT(lines, filename = "failed_sbd.txt") {
    const blob = new Blob([lines.join("\n")], { type: 'text/plain;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  function parseSubjects(subjectString) {
    const subjects = {
      "Ng·ªØ vƒÉn": "", "To√°n": "",
      "Ti·∫øng Anh": "", "Ti·∫øng Ph√°p": "", "Ti·∫øng Trung": "", "Ti·∫øng Nh·∫≠t": "", "Ti·∫øng ƒê·ª©c": "", "Ti·∫øng Nga": "",
      "L·ªãch s·ª≠": "", "V·∫≠t l√≠": "", "H√≥a h·ªçc": "", "Sinh h·ªçc": "", "ƒê·ªãa l√≠": "",
      "Gi√°o d·ª•c Kinh t·∫ø v√† Ph√°p lu·∫≠t": "", "Tin h·ªçc": "",
      "C√¥ng ngh·ªá C√¥ng nghi·ªáp": "", "C√¥ng ngh·ªá N√¥ng nghi·ªáp": "",
    };

    const abbreviationMap = {
      "TI": "Tin h·ªçc",
      "KTPL": "Gi√°o d·ª•c Kinh t·∫ø v√† Ph√°p lu·∫≠t",
      "CNCN": "C√¥ng ngh·ªá C√¥ng nghi·ªáp",
      "CNNN": "C√¥ng ngh·ªá N√¥ng nghi·ªáp",
    };

    const programMatch = subjectString.match(/\((.*?)\)$/);
    const program = programMatch ? programMatch[1] : "";
    const subjectClean = subjectString.replace(/\(.*?\)$/, "").trim();

    const regex = /([^\:]+):\s*([0-9.]+)/g;
    let match;
    while ((match = regex.exec(subjectClean)) !== null) {
      let name = match[1].trim();
      const score = match[2];

      if (abbreviationMap[name]) name = abbreviationMap[name];
      if (subjects.hasOwnProperty(name)) {
        subjects[name] = score;
      } else if (/^Ti·∫øng (Anh|Ph√°p|Trung|Nh·∫≠t|ƒê·ª©c|Nga)$/i.test(name)) {
        subjects[name] = score;
      }
    }

    return { subjects, program };
  }

  function toCSV(results) {
    const headers = [
      "SBD", "T√™n", "Ng√†y sinh",
      "Ng·ªØ vƒÉn", "To√°n",
      "Ti·∫øng Anh", "Ti·∫øng Ph√°p", "Ti·∫øng Trung", "Ti·∫øng Nh·∫≠t", "Ti·∫øng ƒê·ª©c", "Ti·∫øng Nga",
      "L·ªãch s·ª≠", "V·∫≠t l√≠", "H√≥a h·ªçc", "Sinh h·ªçc", "ƒê·ªãa l√≠",
      "Gi√°o d·ª•c Kinh t·∫ø v√† Ph√°p lu·∫≠t", "Tin h·ªçc", "C√¥ng ngh·ªá C√¥ng nghi·ªáp", "C√¥ng ngh·ªá N√¥ng nghi·ªáp",
      "Ch∆∞∆°ng tr√¨nh"
    ];
    const lines = [headers.join(",")];

    for (const row of results) {
      const [sbd, name, dob, subjectRaw] = row;
      const { subjects, program } = parseSubjects(subjectRaw);

      const csvRow = [
        sbd,
        `"${name}"`,
        dob,
        subjects["Ng·ªØ vƒÉn"],
        subjects["To√°n"],
        subjects["Ti·∫øng Anh"],
        subjects["Ti·∫øng Ph√°p"],
        subjects["Ti·∫øng Trung"],
        subjects["Ti·∫øng Nh·∫≠t"],
        subjects["Ti·∫øng ƒê·ª©c"],
        subjects["Ti·∫øng Nga"],
        subjects["L·ªãch s·ª≠"],
        subjects["V·∫≠t l√≠"],
        subjects["H√≥a h·ªçc"],
        subjects["Sinh h·ªçc"],
        subjects["ƒê·ªãa l√≠"],
        subjects["Gi√°o d·ª•c Kinh t·∫ø v√† Ph√°p lu·∫≠t"],
        subjects["Tin h·ªçc"],
        subjects["C√¥ng ngh·ªá C√¥ng nghi·ªáp"],
        subjects["C√¥ng ngh·ªá N√¥ng nghi·ªáp"],
        program
      ];

      lines.push(csvRow.join(","));
    }

    return lines.join("\n");
  }

  const results = [];
  const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
  if (!tokenInput) {
    alert("‚ö†Ô∏è Token not found. Make sure you're on https://diemthi.hcm.edu.vn/");
    return;
  }
  const token = tokenInput.value;

  for (let i = getResumeStart(); i <= END; i++) {
    if (shouldStop) {
      alert("üõë Stopped by user. Saving progress...");
      break;
    }

    const sbd = i.toString().padStart(8, '0');
    let attempt = 0;
    let success = false;

    while (attempt < 3 && !success) {
      attempt++;

      try {
        const response = await fetch("https://diemthi.hcm.edu.vn/Home/Show", {
          headers: { "content-type": "application/x-www-form-urlencoded" },
          body: `__RequestVerificationToken=${encodeURIComponent(token)}&SoBaoDanh=${sbd}`,
          method: "POST",
        });

        if (!response.ok) throw new Error("Non-200 response");

        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");

        const rows = doc.querySelectorAll("table tr");
        if (rows.length < 2) {
          console.log(`üö´ No data for SBD ${sbd}`);
          break;
        }

        const cells = rows[1].querySelectorAll("td");
        if (cells.length < 3) break;

        const name = cells[0].innerText.trim();
        const dob = cells[1].innerText.trim();
        const subjectsText = cells[2].innerText.trim();

        results.push([sbd, name, dob, subjectsText]);
        console.log(`‚úÖ SBD ${sbd}`);
        success = true;
        saveProgress(i); // only after success
      } catch (err) {
        console.warn(`‚ö†Ô∏è SBD ${sbd} failed (attempt ${attempt}): ${err.message}`);
        if (attempt >= 3) {
          failedSBDs.push(sbd);
          const merged = saveResults(results);
          const partialCSV = toCSV(merged);
          downloadCSV(partialCSV, `partial_until_${sbd}.csv`);
          downloadTXT(failedSBDs, "failed_sbd.txt");
          alert(`‚ùå Timed out at SBD ${sbd}. Partial file and failed SBDs saved.`);
          return;
        }
        await new Promise(r => setTimeout(r, 1000));
      }
    }

    await new Promise(r => setTimeout(r, 50));
  }

  const final = saveResults(results);
  const csv = toCSV(final);
  downloadCSV(csv);
  if (failedSBDs.length > 0) {
    downloadTXT(failedSBDs, "failed_sbd.txt");
  }
  alert("üéâ Scraping completed!");
  console.log("‚úÖ All done!");
})();
